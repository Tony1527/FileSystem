/*#include<stdio.h>
#include<string.h>
#include<unistd.h>
#include<time.h>
#include"dentry.h"
#include"Queue_d_address.h"
#define FILEPATH_INVALID -2			//路径包含非法字符
#define FILEPATH_ERROR -1			//路径出错，有文件/文件夹不存在的情况
#define OUT_OF_ADDRESS NULL			//超出了dentry的范围
#define parse(address) parseDArress(address)
#define dentry_each_child(parent_address,pdentry_child,pdentry_lsibling) Pdentry __pf=parse(parent_address);d_address __childAddr=__pf->d_subdir;\
for(pdentry_lsibling = parse(parent_address),pdentry_child = parse(__childAddr);__childAddr!=EOF;pdentry_lsibling = pdentry_child,__childAddr=pdentry_child->d_rsibling,pdentry_child = __childAddr!=EOF?parse(__childAddr):NULL)	//这个宏的意思是将父节点的d_address读入，还有两个指针用来接收指向孩子的遍历指针pdentry_child，以及在初始化时指向父节点pdentry_lsibling，后来这个指针用来标识当前正在读入节点的d_address*/
#include<unistd.h>
#include "dir_d.h"
#include<time.h>

void* getPhysicalBlock();
void Initial();

//获得物理块
void* getPhysicalBlock(){
	return &vf->pb[vf->located++];
}



//初始化操作
void Initial(){
	int i;
	for(i=0;i<6;i++){
		normal_cd[i] = (critical_dir*)getPhysicalBlock();
		InitCDBlocks(normal_cd[i]);
	}
	printf("cd:%d\n",sizeof(critical_dir));
	d_address root = applyDentry();
	Pdentry pf = parse(root),ps;
	strcpy(pf->d_filename,"/");
	_mkfile_d("/usr");
	_mkfile_d("/src");
	_mkfile_d("/local");
	current_address = 3;
	_mkfile_d("/local/tony");
	_mkfile_d("/local/tony/yes");
	_rmfile_d("/src");
	_mkfile_d("/src");
	Queue_d_address* queue = _ls_d();
	d_address a;
	while(!IsQueueEmpty(queue)){
		Dequeue(queue,&a);
		printf("%s\n",parse(a)->d_filename);
	}
//	printf("Here:%s\n",parse(_scan_d(".../......."))->d_filename);
	_printSubdir(root,0);
//	printf("%s\n",_scan_d("local/tony.c") == FILEPATH_ERROR?"yes":"no");
}

int main(){
	vf = (PhysicalBlocks*)malloc(sizeof(PhysicalBlocks));
	vf->located = 0;
	my_dir = malloc(sizeof(critical_dir));
	Initial();
	InitCDBlocks(my_dir);
	printf("%.6f\n",(double)clock()/CLOCKS_PER_SEC);
}
